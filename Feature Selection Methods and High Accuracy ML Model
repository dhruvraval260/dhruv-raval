import numpy as np
import pandas as pd
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_selection import SelectFromModel
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# ------------------------------------
# Step 1: Load dataset
# ------------------------------------
data = load_breast_cancer()
X = pd.DataFrame(data.data, columns=data.feature_names)
y = pd.Series(data.target, name='target')

print("Original feature shape:", X.shape)

# ------------------------------------
# Step 2: Feature Selection (Embedded Method)
# ------------------------------------
selector = SelectFromModel(RandomForestClassifier(n_estimators=100, random_state=42), threshold='median')
X_selected = selector.fit_transform(X, y)

selected_features = X.columns[selector.get_support()]
print("Selected features:", list(selected_features))
print("Reduced feature shape:", X_selected.shape)

# ------------------------------------
# Step 3: Train/Test Split
# ------------------------------------
X_train, X_test, y_train, y_test = train_test_split(
    X_selected, y, test_size=0.2, random_state=42, stratify=y
)

# ------------------------------------
# Step 4: Train Random Forest Classifier
# ------------------------------------
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train)

# ------------------------------------
# Step 5: Evaluate the Model
# ------------------------------------
y_pred = clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

print("\nâœ… Accuracy: {:.4f}".format(accuracy))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# ------------------------------------
# Step 6: Confusion Matrix (Optional Visualization)
# ------------------------------------
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=data.target_names, yticklabels=data.target_names)
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.tight_layout()
plt.show()
